#cloud-config
# VibeStack Coolify Server - Ansible Ready Configuration
# This script prepares the server with Ansible and configuration playbooks

package_update: true
package_upgrade: true

packages:
  - python3
  - python3-pip
  - git
  - curl
  - wget
  - software-properties-common
  - resolvconf

write_files:
  - path: /opt/vibestack-ansible/coolify/install.yml
    content: |
      ---
      # Coolify Installation Playbook
      # Installs Coolify on OCI instances

      - name: Install Coolify
        hosts: localhost
        become: yes
        gather_facts: yes
        vars:
          docker_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"

        tasks:
          - name: System information
            debug:
              msg:
                - "üöÄ Coolify Installation"
                - "üìã Host: {{ ansible_hostname }}"
                - "üèóÔ∏è Architecture: {{ ansible_architecture }} (Docker: {{ docker_arch }})"
                - "üíø Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}"

          - name: Update system packages
            apt:
              update_cache: yes
              upgrade: dist
              cache_valid_time: 3600

          - name: Install required packages
            apt:
              name:
                - ca-certificates
                - curl
                - gnupg
                - lsb-release
                - software-properties-common
                - apt-transport-https
                - git
                - wget
              state: present

          - name: Install Docker
            block:
              - name: Check if Docker is installed
                command: docker --version
                register: docker_check
                failed_when: false
                changed_when: false

              - name: Docker installation status
                debug:
                  msg: "Docker status: {{ 'Already installed' if docker_check.rc == 0 else 'Not installed' }}"

              - name: Add Docker GPG key
                apt_key:
                  url: https://download.docker.com/linux/ubuntu/gpg
                  state: present
                when: docker_check.rc != 0

              - name: Add Docker repository
                apt_repository:
                  repo: "deb [arch={{ docker_arch }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
                  state: present
                when: docker_check.rc != 0

              - name: Install Docker packages
                apt:
                  name:
                    - docker-ce
                    - docker-ce-cli
                    - containerd.io
                    - docker-compose-plugin
                  state: present
                  update_cache: yes
                when: docker_check.rc != 0

              - name: Start and enable Docker
                systemd:
                  name: docker
                  state: started
                  enabled: yes

          - name: Install Coolify
            block:
              - name: Check if Coolify is already installed
                stat:
                  path: /data/coolify
                register: coolify_installed

              - name: Wait for network connectivity
                wait_for:
                  host: 8.8.8.8
                  port: 53
                  timeout: 60
                  delay: 10

              - name: Download Coolify installer
                shell: |
                  curl -fsSL https://cdn.coollabs.io/coolify/install.sh -o /tmp/install_coolify.sh
                  chmod +x /tmp/install_coolify.sh
                args:
                  creates: /tmp/install_coolify.sh
                when: not coolify_installed.stat.exists
                retries: 3
                delay: 10

              - name: Run Coolify installer
                shell: /tmp/install_coolify.sh
                args:
                  creates: /data/coolify
                when: not coolify_installed.stat.exists

              - name: Wait for Coolify to start
                wait_for:
                  port: 8000
                  delay: 30
                  timeout: 300

              - name: Get public IP address
                uri:
                  url: http://ifconfig.me/ip
                  method: GET
                  return_content: yes
                register: public_ip
                ignore_errors: yes

              - name: Display Coolify access information
                debug:
                  msg:
                    - "‚úÖ Coolify Installation Complete!"
                    - "üåê Access: http://{{ public_ip.content | trim if public_ip.content is defined else ansible_default_ipv4.address }}:8000"
                    - "üìù Complete the initial setup wizard in your browser"
    permissions: '0644'

  - path: /opt/vibestack-ansible/README.md
    content: |
      # VibeStack Ansible Configuration

      This directory contains Ansible playbooks for configuring your VibeStack servers.

      ## Quick Start

      ### Configure Coolify
      ```bash
      cd /opt/vibestack-ansible
      ansible-playbook coolify/install.yml
      ```

      ### Access Coolify
      After installation, open your browser to:
      http://$(curl -s ifconfig.me):8000

      ## What Gets Installed

      - **Docker**: Container runtime for Coolify
      - **Coolify**: Self-hosted application deployment platform
      - **Initial Setup**: Ready for web-based configuration

      ## Next Steps

      1. Run the installation playbook above
      2. Open Coolify in your browser
      3. Complete the setup wizard (create admin user)
      4. Start deploying applications!

      ## Troubleshooting

      - Check Docker: `sudo docker ps`
      - Check Coolify logs: `sudo docker logs coolify`
      - Restart Coolify: `cd /data/coolify && sudo docker compose restart`
    permissions: '0644'

runcmd:
  - echo 'Configuring root access for Coolify...'
  - sed -i 's/^#*PermitRootLogin.*/PermitRootLogin without-password/' /etc/ssh/sshd_config
  - systemctl restart sshd
  - mkdir -p /root/.ssh
  - chmod 700 /root/.ssh
  - cp /home/ubuntu/.ssh/authorized_keys /root/.ssh/authorized_keys
  - chmod 600 /root/.ssh/authorized_keys
  - chown -R root:root /root/.ssh
  - echo 'Root SSH access configured'
  - echo 'Configuring UFW firewall for Coolify...'
  - ufw allow 22/tcp comment 'SSH'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw allow 8000/tcp comment 'Coolify Web Interface'
  - ufw allow 6001/tcp comment 'Coolify Real-time Communications'
  - ufw allow 6002/tcp comment 'Coolify Terminal Access'
  - ufw allow from 172.17.0.0/16 comment 'Docker network'
  - ufw allow from 172.18.0.0/16 comment 'Docker network'
  - ufw --force enable
  - echo 'UFW firewall configured'
  - echo 'Configuring DNS resolution...'
  - echo 'nameserver 8.8.8.8' | tee /etc/resolv.conf
  - echo 'nameserver 1.1.1.1' | tee -a /etc/resolv.conf
  - systemctl restart systemd-resolved
  - sleep 5
  - echo 'Installing Ansible and dependencies...'
  - pip3 install --upgrade pip
  - pip3 install ansible
  - pip3 install docker
  - sleep 10
  - echo 'Installing Ansible collections...'
  - /usr/local/bin/ansible-galaxy collection install community.general --force
  - /usr/local/bin/ansible-galaxy collection install community.docker --force
  - /usr/local/bin/ansible-galaxy collection install ansible.posix --force
  - chown -R ubuntu:ubuntu /opt/vibestack-ansible
  - echo 'Ansible environment ready'
  - echo 'Configuration files in /opt/vibestack-ansible/'
  - echo 'To configure run cd /opt/vibestack-ansible && ansible-playbook coolify/install.yml'

final_message: |
  VibeStack Coolify server is ready!

  Next steps:
  1. SSH into your server
  2. Run: cd /opt/vibestack-ansible && ansible-playbook coolify/install.yml
  3. Access Coolify at http://[YOUR-SERVER-IP]:8000

  The server has been configured with Ansible and all necessary playbooks.