#cloud-config
# VibeStack Coolify Cloud-Init Configuration
# Includes: DNS fixes, Cloudflare tunnel support, proper timing, and error handling

hostname: vibestack-coolify
timezone: UTC

# DISABLE automatic package management - we control timing for DNS
package_update: false
package_upgrade: false
package_reboot_if_required: false

# DNS fix happens FIRST in bootcmd (early boot phase)
bootcmd:
  - echo "nameserver 1.1.1.1" > /etc/resolv.conf
  - echo "nameserver 1.0.0.1" >> /etc/resolv.conf
  - echo "nameserver 8.8.8.8" >> /etc/resolv.conf
  - echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  - echo "DNS configured at $(date)" >> /var/log/vibestack-dns.log

write_files:
  # Backup DNS config
  - content: |
      nameserver 1.1.1.1
      nameserver 1.0.0.1
      nameserver 8.8.8.8
      nameserver 8.8.4.4
    path: /etc/resolv.conf.vibestack
    permissions: '0644'

  # Environment file for Cloudflare configuration
  - content: |
%{ for var in cloudflare_env_vars ~}
      ${var}
%{ endfor ~}
    path: /opt/vibestack-ansible/.env
    permissions: '0644'

%{ if setup_custom_ssl ~}
  # SSL Certificate Files
  - content: |
      ${ssl_cert_b64}
    path: /opt/vibestack-ansible/ssl-cert.b64
    permissions: '0600'
    owner: root:root
    encoding: plain

  - content: |
      ${ssl_key_b64}
    path: /opt/vibestack-ansible/ssl-key.b64
    permissions: '0600'
    owner: root:root
    encoding: plain

%{ if ssl_chain_b64 != "" ~}
  - content: |
      ${ssl_chain_b64}
    path: /opt/vibestack-ansible/ssl-chain.b64
    permissions: '0600'
    owner: root:root
    encoding: plain
%{ endif ~}

  - content: |
      SSL_ENABLED=true
    path: /opt/vibestack-ansible/ssl-config.env
    permissions: '0644'
%{ endif ~}

ssh_authorized_keys:
%{ for key in split("\n", ssh_authorized_keys) ~}
%{ if trimspace(key) != "" ~}
  - ${trimspace(key)}
%{ endif ~}
%{ endfor ~}

ssh_pwauth: false

# All package installation happens AFTER DNS is working
runcmd:
  # Ensure DNS is working
  - cp /etc/resolv.conf.vibestack /etc/resolv.conf
  - echo "Starting VibeStack setup at $(date)" >> /var/log/vibestack-setup.log

  # Test DNS resolution before proceeding
  - timeout 30 bash -c 'until nslookup ubuntu.com; do echo "Waiting for DNS..." >> /var/log/vibestack-setup.log; sleep 2; done'

  # Wait for any automatic package management to complete
  - |
    echo "Waiting for automatic package management to complete..." >> /var/log/vibestack-setup.log
    timeout 300 bash -c 'while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do echo "Waiting for dpkg lock..." >> /var/log/vibestack-setup.log; sleep 5; done'
    timeout 300 bash -c 'while sudo lsof /var/lib/apt/lists/lock >/dev/null 2>&1; do echo "Waiting for apt lock..." >> /var/log/vibestack-setup.log; sleep 5; done'
    timeout 300 bash -c 'while sudo lsof /var/cache/apt/archives/lock >/dev/null 2>&1; do echo "Waiting for apt cache lock..." >> /var/log/vibestack-setup.log; sleep 5; done'
    echo "Package management locks cleared" >> /var/log/vibestack-setup.log

  # Now safely update packages with working DNS (with retries and lock checking)
  - |
    for i in {1..3}; do
      echo "Package update attempt $i" >> /var/log/vibestack-setup.log
      if apt-get update; then
        echo "Package update successful" >> /var/log/vibestack-setup.log
        break
      else
        echo "Package update failed, waiting 10 seconds..." >> /var/log/vibestack-setup.log
        sleep 10
      fi
    done

  - |
    for i in {1..3}; do
      echo "Package install attempt $i" >> /var/log/vibestack-setup.log
      if apt-get install -y python3-pip git curl wget unzip software-properties-common resolvconf jq lsof; then
        echo "Package install successful" >> /var/log/vibestack-setup.log
        break
      else
        echo "Package install failed, waiting 15 seconds..." >> /var/log/vibestack-setup.log
        sleep 15
        # Clear any potential locks before retry
        timeout 60 bash -c 'while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 2; done' || true
      fi
    done

  # Create ansible directory
  - mkdir -p /opt/vibestack-ansible

  # Download the latest playbook from GitHub (with retry)
  - timeout 60 wget -O /tmp/complete-setup.yml https://raw.githubusercontent.com/evolv3ai/oci-cloudnative/main/coolify-complete-setup.yml || (sleep 10 && timeout 60 wget -O /tmp/complete-setup.yml https://raw.githubusercontent.com/evolv3ai/oci-cloudnative/main/coolify-complete-setup.yml)
  - cp /tmp/complete-setup.yml /opt/vibestack-ansible/complete-setup.yml

  # Install pip and ansible with proper paths and retries
  - python3 -m pip install --upgrade pip || (sleep 5 && python3 -m pip install --upgrade pip)
  - sleep 5
  - pip3 install ansible docker || (sleep 5 && pip3 install ansible docker)
  - sleep 5

  # Install ansible collections (try both possible paths)
  - /home/ubuntu/.local/bin/ansible-galaxy collection install community.general --force || /usr/local/bin/ansible-galaxy collection install community.general --force
  - /home/ubuntu/.local/bin/ansible-galaxy collection install community.docker --force || /usr/local/bin/ansible-galaxy collection install community.docker --force
  - /home/ubuntu/.local/bin/ansible-galaxy collection install ansible.posix --force || /usr/local/bin/ansible-galaxy collection install ansible.posix --force

  # Set proper permissions
  - chown -R ubuntu:ubuntu /opt/vibestack-ansible

%{ if setup_custom_ssl ~}
  # Process SSL certificates if provided
  - |
    if [ -f /opt/vibestack-ansible/ssl-cert.b64 ]; then
      echo "Processing SSL certificates..." >> /var/log/vibestack-setup.log
      # Decode certificates with proper formatting
      base64 -d /opt/vibestack-ansible/ssl-cert.b64 | fold -w 64 > /tmp/ssl.crt
      base64 -d /opt/vibestack-ansible/ssl-key.b64 | fold -w 64 > /tmp/ssl.key

      # Fix certificate formatting to ensure proper PEM structure
      {
        echo "-----BEGIN CERTIFICATE-----"
        grep -v "BEGIN CERTIFICATE\|END CERTIFICATE" /tmp/ssl.crt | tr -d '\n' | fold -w 64
        echo "-----END CERTIFICATE-----"
      } > /opt/vibestack-ansible/ssl.cert

      # Fix private key formatting
      {
        echo "-----BEGIN PRIVATE KEY-----"
        grep -v "BEGIN PRIVATE KEY\|END PRIVATE KEY" /tmp/ssl.key | tr -d '\n' | fold -w 64
        echo "-----END PRIVATE KEY-----"
      } > /opt/vibestack-ansible/ssl.key

      # Handle certificate chain if provided
      if [ -f /opt/vibestack-ansible/ssl-chain.b64 ]; then
        base64 -d /opt/vibestack-ansible/ssl-chain.b64 | fold -w 64 > /tmp/ssl-chain.crt
        {
          echo "-----BEGIN CERTIFICATE-----"
          grep -v "BEGIN CERTIFICATE\|END CERTIFICATE" /tmp/ssl-chain.crt | tr -d '\n' | fold -w 64
          echo "-----END CERTIFICATE-----"
        } > /opt/vibestack-ansible/ssl-chain.cert
        rm -f /tmp/ssl-chain.crt
      fi

      # Set proper permissions
      chmod 644 /opt/vibestack-ansible/ssl.cert
      chmod 600 /opt/vibestack-ansible/ssl.key
      [ -f /opt/vibestack-ansible/ssl-chain.cert ] && chmod 644 /opt/vibestack-ansible/ssl-chain.cert

      # Clean up temporary and base64 files
      rm -f /opt/vibestack-ansible/*.b64 /tmp/ssl.crt /tmp/ssl.key
      echo "SSL certificates processed successfully with proper formatting" >> /var/log/vibestack-setup.log
    fi
%{ endif ~}

  # Final check: ensure no package management processes are running before Ansible
  - |
    echo "Final package management check before Ansible..." >> /var/log/vibestack-setup.log
    timeout 120 bash -c 'while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do echo "Waiting for final dpkg lock clear..." >> /var/log/vibestack-setup.log; sleep 3; done'
    echo "All package locks cleared, starting Ansible..." >> /var/log/vibestack-setup.log

  # Run the automation playbook with better error handling
  - |
    cd /opt/vibestack-ansible
    if /home/ubuntu/.local/bin/ansible-playbook complete-setup.yml; then
      echo "Ansible playbook completed successfully" >> /var/log/vibestack-setup.log
    elif /usr/local/bin/ansible-playbook complete-setup.yml; then
      echo "Ansible playbook completed successfully (alt path)" >> /var/log/vibestack-setup.log
    else
      echo "Ansible playbook failed, check logs" >> /var/log/vibestack-setup.log
      exit 1
    fi

  # Log completion
  - echo "VibeStack Coolify setup completed at $(date)" >> /var/log/vibestack-setup.log

final_message: "VibeStack Coolify setup completed. Check /var/log/vibestack-setup.log for details."