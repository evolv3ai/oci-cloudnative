#cloud-config
# VibeStack KASM Server - Ansible Ready Configuration
# This script prepares the server with Ansible and configuration playbooks

package_update: true
package_upgrade: true

packages:
  - python3
  - python3-pip
  - git
  - curl
  - wget
  - software-properties-common
  - resolvconf

write_files:
  - path: /opt/vibestack-ansible/kasm/install.yml
    content: |
      ---
      # KASM Workspaces Installation Playbook
      # Installs KASM on OCI ARM64 instances

      - name: Install KASM Workspaces
        hosts: localhost
        become: yes
        gather_facts: yes
        vars:
          docker_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
          kasm_version: "1.17.0"
          swap_file: "/swapfile"
          swap_size: "2G"
          # Auto-generate secure passwords
          kasm_admin_password: "{{ lookup('password', '/tmp/kasm_admin_pass length=16 chars=ascii_letters,digits,!@#$%^&*()') }}"
          kasm_user_password: "{{ lookup('password', '/tmp/kasm_user_pass length=16 chars=ascii_letters,digits,!@#$%^&*()') }}"

        tasks:
          - name: Get external IP address
            shell: curl -s https://ifconfig.me
            register: external_ip
            retries: 3
            delay: 5

          - name: System information
            debug:
              msg:
                - "🚀 KASM Workspaces Installation"
                - "📋 Host: {{ ansible_hostname }}"
                - "🏗️ Architecture: {{ ansible_architecture }} (Docker: {{ docker_arch }})"
                - "💿 Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}"
                - "🌐 External IP: {{ external_ip.stdout }}"

          - name: Update system packages
            apt:
              update_cache: yes
              upgrade: dist
              cache_valid_time: 3600

          - name: Install required packages
            apt:
              name:
                - ca-certificates
                - curl
                - gnupg
                - lsb-release
                - software-properties-common
                - apt-transport-https
              state: present

          - name: Configure swap space
            block:
              - name: Check if swap file exists
                stat:
                  path: "{{ swap_file }}"
                register: swap_file_stat

              - name: Create swap file
                command: fallocate -l {{ swap_size }} {{ swap_file }}
                when: not swap_file_stat.stat.exists

              - name: Set swap file permissions
                file:
                  path: "{{ swap_file }}"
                  mode: '0600'
                when: not swap_file_stat.stat.exists

              - name: Make swap file
                command: mkswap {{ swap_file }}
                when: not swap_file_stat.stat.exists

              - name: Enable swap
                command: swapon {{ swap_file }}
                when: not swap_file_stat.stat.exists

              - name: Add swap to fstab
                lineinfile:
                  path: /etc/fstab
                  line: "{{ swap_file }} none swap sw 0 0"
                  create: yes

          - name: Install Docker
            block:
              - name: Check if Docker is installed
                command: docker --version
                register: docker_check
                failed_when: false
                changed_when: false

              - name: Docker installation status
                debug:
                  msg: "Docker status: {{ 'Already installed' if docker_check.rc == 0 else 'Not installed' }}"

              - name: Remove old Docker packages
                apt:
                  name:
                    - docker
                    - docker-engine
                    - docker.io
                    - containerd
                    - runc
                  state: absent
                when: docker_check.rc != 0

              - name: Remove conflicting repository files
                file:
                  path: "{{ item }}"
                  state: absent
                loop:
                  - /etc/apt/sources.list.d/docker.list
                  - /etc/apt/keyrings/docker.gpg
                  - /usr/share/keyrings/docker-archive-keyring.gpg
                when: docker_check.rc != 0

              - name: Create keyrings directory
                file:
                  path: /etc/apt/keyrings
                  state: directory
                  mode: '0755'
                when: docker_check.rc != 0

              - name: Add Docker GPG key
                shell: |
                  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                  chmod a+r /etc/apt/keyrings/docker.gpg
                when: docker_check.rc != 0

              - name: Add Docker repository
                shell: |
                  echo "deb [arch={{ docker_arch }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable" > /etc/apt/sources.list.d/docker.list
                when: docker_check.rc != 0

              - name: Update apt cache after adding Docker repo
                apt:
                  update_cache: yes
                when: docker_check.rc != 0

              - name: Install Docker packages
                apt:
                  name:
                    - docker-ce
                    - docker-ce-cli
                    - containerd.io
                    - docker-buildx-plugin
                    - docker-compose-plugin
                  state: present
                  update_cache: yes
                when: docker_check.rc != 0

              - name: Add ubuntu user to docker group
                user:
                  name: ubuntu
                  groups: docker
                  append: yes

              - name: Enable and start Docker service
                systemd:
                  name: docker
                  enabled: yes
                  state: started

              - name: Optimize Docker for ARM64
                copy:
                  content: |
                    {
                      "log-driver": "json-file",
                      "log-opts": {
                        "max-size": "10m",
                        "max-file": "3"
                      },
                      "storage-driver": "overlay2",
                      "default-address-pools": [
                        {
                          "base": "172.17.0.0/16",
                          "size": 24
                        }
                      ]
                    }
                  dest: /etc/docker/daemon.json
                  mode: '0644'
                notify: restart docker

              - name: Restart Docker if config changed
                systemd:
                  name: docker
                  state: restarted
                when: docker_check.rc == 0

          - name: Download and install KASM Workspaces (Offline Method)
            block:
              - name: Create KASM directory
                file:
                  path: /tmp/kasm_install
                  state: directory
                  mode: '0755'

              - name: Download KASM installer
                get_url:
                  url: "https://kasm-static-content.s3.amazonaws.com/kasm_release_{{ kasm_version }}.7f020d.tar.gz"
                  dest: /tmp/kasm_install/kasm_release.tar.gz
                  mode: '0644'

              - name: Download KASM service images for ARM64
                get_url:
                  url: "https://kasm-static-content.s3.amazonaws.com/kasm_release_service_images_{{ docker_arch }}_{{ kasm_version }}.7f020d.tar.gz"
                  dest: /tmp/kasm_install/kasm_release_service_images.tar.gz
                  mode: '0644'
                when: docker_arch == 'arm64'

              - name: Download KASM workspace images for ARM64
                get_url:
                  url: "https://kasm-static-content.s3.amazonaws.com/kasm_release_workspace_images_{{ docker_arch }}_{{ kasm_version }}.7f020d.tar.gz"
                  dest: /tmp/kasm_install/kasm_release_workspace_images.tar.gz
                  mode: '0644'
                when: docker_arch == 'arm64'

              - name: Download KASM plugin images for ARM64
                get_url:
                  url: "https://kasm-static-content.s3.amazonaws.com/kasm_release_plugin_images_{{ docker_arch }}_{{ kasm_version }}.7f020d.tar.gz"
                  dest: /tmp/kasm_install/kasm_release_plugin_images.tar.gz
                  mode: '0644'
                when: docker_arch == 'arm64'

              - name: Extract KASM installer
                unarchive:
                  src: /tmp/kasm_install/kasm_release.tar.gz
                  dest: /tmp/kasm_install
                  remote_src: yes

              - name: Run KASM offline installation for ARM64
                shell: |
                  cd /tmp/kasm_install/kasm_release
                  ./install.sh --accept-eula --swap-size {{ swap_size }} \
                    --admin-password "{{ kasm_admin_password }}" \
                    --user-password "{{ kasm_user_password }}" \
                    --offline-workspaces /tmp/kasm_install/kasm_release_workspace_images.tar.gz \
                    --offline-service /tmp/kasm_install/kasm_release_service_images.tar.gz \
                    --offline-network-plugin /tmp/kasm_install/kasm_release_plugin_images.tar.gz
                args:
                  creates: /opt/kasm/current
                when: docker_arch == 'arm64'

              - name: Run KASM standard installation for AMD64
                shell: |
                  cd /tmp/kasm_install/kasm_release
                  ./install.sh --accept-eula --swap-size {{ swap_size }} \
                    --admin-password "{{ kasm_admin_password }}" \
                    --user-password "{{ kasm_user_password }}"
                args:
                  creates: /opt/kasm/current
                when: docker_arch == 'amd64'

              - name: Get KASM admin credentials
                slurp:
                  src: /opt/kasm/current/conf/app/admin_creds.txt
                register: admin_creds
                ignore_errors: yes

              - name: Display KASM access information
                debug:
                  msg:
                    - "====================================================="
                    - "✅ KASM Installation Complete!"
                    - "====================================================="
                    - "🌐 External Access URL: https://{{ external_ip.stdout }}"
                    - "🌐 Internal Access URL: https://{{ ansible_default_ipv4.address }}"
                    - "====================================================="
                    - "🔐 SAVE THESE CREDENTIALS SECURELY:"
                    - "👤 Admin Username: admin@kasm.local"
                    - "🔑 Admin Password: {{ kasm_admin_password }}"
                    - "-----------------------------------------------------"
                    - "👤 User Username: user@kasm.local"
                    - "🔑 User Password: {{ kasm_user_password }}"
                    - "====================================================="
                    - "📁 Credentials also saved to: /opt/kasm/credentials.txt"
                    - "⚠️  Change these passwords after first login!"

              - name: Save credentials to file
                copy:
                  content: |
                    =====================================================
                    KASM Workspaces Access Credentials
                    Generated: {{ ansible_date_time.iso8601 }}
                    =====================================================
                    
                    External Access: https://{{ external_ip.stdout }}
                    Internal Access: https://{{ ansible_default_ipv4.address }}
                    
                    Admin Credentials:
                    -----------------
                    Username: admin@kasm.local
                    Password: {{ kasm_admin_password }}
                    
                    User Credentials:
                    ----------------
                    Username: user@kasm.local
                    Password: {{ kasm_user_password }}
                    
                    =====================================================
                    IMPORTANT: Change these passwords after first login!
                    To change: Login > Admin > Users > Edit User
                    =====================================================
                  dest: /opt/kasm/credentials.txt
                  mode: '0600'
    permissions: '0644'

  - path: /usr/local/bin/kasm-health-check
    content: |
      #!/bin/bash
      # KASM Workspaces Health Check Script
      # Based on OCI-Coolify best practices
      
      RED='\033[0;31m'
      GREEN='\033[0;32m'
      NC='\033[0m' # No Color
      
      echo "🔍 Checking KASM Workspaces Health..."
      
      # Check all required KASM containers
      REQUIRED_CONTAINERS="kasm_db kasm_api kasm_manager kasm_proxy kasm_agent kasm_share kasm_guac"
      ALL_HEALTHY=true
      
      for container in $REQUIRED_CONTAINERS; do
          if docker ps | grep -q "$container"; then
              echo -e "${GREEN}✅${NC} $container is running"
          else
              echo -e "${RED}❌${NC} $container is NOT running"
              ALL_HEALTHY=false
          fi
      done
      
      # Check web interface
      if curl -k -sf https://localhost:443 > /dev/null; then
          echo -e "${GREEN}✅${NC} KASM web interface is accessible"
      else
          echo -e "${RED}❌${NC} KASM web interface is NOT accessible"
          ALL_HEALTHY=false
      fi
      
      # Check disk space
      DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
      if [ $DISK_USAGE -gt 80 ]; then
          echo -e "${RED}⚠️${NC} Disk usage is high: ${DISK_USAGE}%"
      else
          echo -e "${GREEN}✅${NC} Disk usage is healthy: ${DISK_USAGE}%"
      fi
      
      # Check memory
      MEM_AVAILABLE=$(free -m | awk '/^Mem:/{print $7}')
      if [ $MEM_AVAILABLE -lt 1000 ]; then
          echo -e "${RED}⚠️${NC} Low memory available: ${MEM_AVAILABLE}MB"
      else
          echo -e "${GREEN}✅${NC} Memory available: ${MEM_AVAILABLE}MB"
      fi
      
      if [ "$ALL_HEALTHY" = true ]; then
          echo -e "${GREEN}🎉 KASM is healthy!${NC}"
          exit 0
      else
          echo -e "${RED}⚠️ KASM has issues that need attention${NC}"
          exit 1
      fi
    permissions: '0755'

  - path: /opt/vibestack-ansible/README.md
    content: |
      # VibeStack Ansible Configuration

      This directory contains Ansible playbooks for configuring your VibeStack servers.

      ## Quick Start

      ### Configure KASM
      ```bash
      cd /opt/vibestack-ansible
      ansible-playbook kasm/install.yml
      ```

      ### Access KASM
      After installation, open your browser to:
      https://$(curl -s ifconfig.me)

      ## What Gets Installed

      - **Docker**: Container runtime for KASM
      - **KASM Workspaces**: Browser-based remote desktop platform
      - **Swap**: 2GB swap file for better performance
      - **Initial Setup**: Ready for web-based configuration

      ## Next Steps

      1. Run the installation playbook above
      2. Open KASM in your browser (HTTPS)
      3. Login with admin credentials from: /opt/kasm/current/conf/app/admin_creds.txt
      4. Configure workspaces and users

      ## Troubleshooting

      - Check KASM status: `sudo docker ps`
      - View admin credentials: `sudo cat /opt/kasm/current/conf/app/admin_creds.txt`
      - Restart KASM: `cd /opt/kasm/current && sudo docker compose restart`
    permissions: '0644'

runcmd:
  - echo 'Configuring UFW firewall for KASM...'
  - ufw allow 22/tcp comment 'SSH'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw allow 3000:4000/tcp comment 'KASM Session Ports'
  - ufw allow from 172.17.0.0/16 comment 'Docker network'
  - ufw allow from 172.18.0.0/16 comment 'Docker network'
  - ufw --force enable
  - echo 'UFW firewall configured'
  - echo 'Configuring DNS resolution...'
  - echo 'nameserver 8.8.8.8' | tee /etc/resolv.conf
  - echo 'nameserver 1.1.1.1' | tee -a /etc/resolv.conf
  - systemctl restart systemd-resolved
  - sleep 5
  - echo 'Installing Ansible and dependencies...'
  - pip3 install --upgrade pip || apt-get update && apt-get install -y python3-pip
  - pip3 install ansible || pip3 install --break-system-packages ansible
  - pip3 install docker || pip3 install --break-system-packages docker
  - sleep 10
  - echo 'Installing Ansible collections...'
  - /usr/local/bin/ansible-galaxy collection install community.general --force || ansible-galaxy collection install community.general --force
  - /usr/local/bin/ansible-galaxy collection install community.docker --force || ansible-galaxy collection install community.docker --force
  - /usr/local/bin/ansible-galaxy collection install ansible.posix --force || ansible-galaxy collection install ansible.posix --force
  - chown -R ubuntu:ubuntu /opt/vibestack-ansible
  - echo 'Setting up KASM health monitoring...'
  - chmod +x /usr/local/bin/kasm-health-check
  - echo '*/5 * * * * root /usr/local/bin/kasm-health-check > /var/log/kasm-health.log 2>&1' >> /etc/crontab
  - echo 'Ansible environment ready'
  - echo 'Configuration files in /opt/vibestack-ansible/'
  - echo 'To configure run cd /opt/vibestack-ansible && ansible-playbook kasm/install.yml'

final_message: |
  VibeStack KASM server is ready!

  Next steps:
  1. SSH into your server
  2. Run: cd /opt/vibestack-ansible && ansible-playbook kasm/install.yml
  3. Access KASM at https://[YOUR-SERVER-IP]

  The server has been configured with Ansible and all necessary playbooks.